Option Compare Database

Private Sub Form_Load()
' If genome build has not been set, set to defult 109 = HG19
If IsNull(Me![comb_WESResultBuild]) Then
    Me!comb_WESResultBuild = 109
End If

'Find number of other variants within +/- 2bp and add to NGSVariant table
Dim sqlPrevVars As String
Dim rsPrevVar As ADODB.Recordset
sqlPrevVars = "SELECT NGSVariant.NGSVariantID, (SELECT Count(*) FROM NGSVariant WHERE NGSVariant.NGSTestID <> currentVar.NGSTestID AND NGSVariant.ChrID=currentVar.ChrID AND NGSVariant.Position_hg19>=(currentVar.Position_hg19-2) And NGSVariant.Position_hg19<=(currentVar.Position_hg19+2)) AS countPrev FROM NGSVariant AS currentVar INNER JOIN NGSVariant ON currentVar.NGSVariantID = NGSVariant.NGSVariantID WHERE NGSVariant.NGSTestID = " & Me.Parent.NGSTestID
Set rsPrevVar = New ADODB.Recordset
rsPrevVar.Open sqlPrevVars, CurrentProject.Connection, adOpenKeyset
While Not rsPrevVar.EOF
    sqlUpdate = "UPDATE NGSVariant SET relVars = " & rsPrevVar.Fields("countPrev") & " WHERE NGSVariantID = " & rsPrevVar.Fields("NGSVariantID")
    DoCmd.SetWarnings False
    DoCmd.RunSQL sqlUpdate
    DoCmd.SetWarnings True
    rsPrevVar.MoveNext
Wend
Set rsPrevVar = Nothing
Me.Requery 'Update variant subform

'lock down result feld if test statusID = complete (4)
If Me.StatusID = 4 Then
        Me.ResultCode.Locked = True
        Me.txt_result.Locked = True
Else
        Me.ResultCode.Locked = False
        Me.txt_result.Locked = False
End If

End Sub

Private Sub VCFImport_Click()
    Dim vcfBaseDir As String
    Dim batch As String
    Dim dnaNum As String
    Dim patID
    Dim NGSTestID As Integer
    Dim PRU As String
    Dim filename As String
    Dim filepath As String
    Dim errReport As String
    Dim desBaseDir As String
    Dim newNGSTestFile As ADODB.Recordset
    Dim todayDate As String
    Dim vcfDict
    Dim PanelType As String

    vcfBaseDir = "\\gstt.local\Shared\Genetics\DNA LAB\Current\WES\Ingenuity_output\Results\"
    destDir = "\\gstt.local\Apps\Moka\Files\ngs\"
    batch = Me.WESBatch
    dnaNum = Me.txt_DNA
    PRU = Me.Parent.PatientID
    PRU = Replace(PRU, ":", "")
    patID = Me.Parent.InternalPatientID
    NGSTestID = Me.Parent.NGSTestID


    If IsNull(Me.WESBatch) Or IsNull(Me.txt_DNA) Then
        MsgBox "Please ensure DNA number and WES batch are assigned to sample before uploading variants", vbExclamation, "Assign DNA/Batch"
    Else
        basePath = vcfBaseDir & batch & "DNA" & dnaNum & "PRU" & PRU & "-*.vcf" 'VCFs will have variable suffix after hyphen, so wildcard (*) used
        Set vcfDict = CreateObject("scripting.dictionary")
        VCFfilename = Dir(basePath) 'Returns recordset of each matching filename
        Do While VCFfilename <> "" 'Loop until no more files
            PanelType = Split(VCFfilename, "-")(1) 'Retrieve the panel type from current file (between first and second hyphen)
            'add 'panel type: filename' to dictionary. If the panel type is already in dictionary display an error message and exit.
            If Not vcfDict.exists(PanelType) Then
                vcfDict.Add PanelType, VCFfilename
            Else
                MsgBox ("Multiple VCF files found of type: " & PanelType & ". Unable to continue with import")
                Exit Sub
            End If
            VCFfilename = Dir 'Moves to next filename in record
        Loop
        If vcfDict.Count = 0 Then 'If no VCF files found, display error message and exit
            MsgBox "No VCF files found that match test details. Ingenuity results must be:" & vbNewLine & vbNewLine & _
            "1. Exported in VCF format" & vbNewLine & _
            "2. Saved with filename format: " & batch & "DNA" & dnaNum & "PRU" & PRU & "-<panel description>-<numerical suffix>.vcf" & vbNewLine & _
            "3. Saved in the following directory: " & vcfBaseDir, vbExclamation, "No VCF Files Found"
        Else 'Build a string to show user which files will be imported if they continue
            filesStr = "The files below will be imported." & vbNewLine & vbNewLine & "Primary panel:" & vbNewLine & vbNewLine & vbTab
            If vcfDict.exists("Primarypanel") Then
                filesStr = filesStr & vcfDict("Primarypanel")
            Else
                filesStr = filesStr & "None"
            End If
            filesStr = filesStr & vbNewLine & vbNewLine & "Secondary panel:" & vbNewLine & vbNewLine & vbTab
            If vcfDict.exists("Secondarypanel") Then
                filesStr = filesStr & vcfDict("Secondarypanel")
            Else
                filesStr = filesStr & "None"
            End If
            filesStr = filesStr & vbNewLine & vbNewLine & "Phenotype panel:" & vbNewLine & vbNewLine & vbTab
            If vcfDict.exists("Phenotype") Then
                filesStr = filesStr & vcfDict("Phenotype")
            Else
                filesStr = filesStr & "None"
            End If
            filesStr = filesStr & vbNewLine & vbNewLine & "Additional panels:" & vbNewLine
            otheVCFcount = 0
            For Each strKey In vcfDict.keys()
                If strKey <> "Primarypanel" And strKey <> "Secondarypanel" And strKey <> "Phenotype" Then
                    filesStr = filesStr & vbNewLine & vbTab & vcfDict(strKey)
                    otherVCFcount = otherVCFcount + 1
                End If
            Next
            If otherVCFcount = 0 Then
                filesStr = filesStr & vbNewLine & vbTab & "None"
            End If
            'Display the list of files that will be imported and give user option to cancel
            If MsgBox(filesStr & vbNewLine & vbNewLine & "Do you wish to continue?", vbYesNo + vbInformation, "Continue?") = vbYes Then
                'Create comma separated string of filepaths to pass to python script
                csFileLst = ""
                loopCount = 0
                For Each strKey In vcfDict.keys()
                loopCount = loopCount + 1
                    csFileLst = csFileLst & vcfBaseDir & vcfDict(strKey)
                    If loopCount <> vcfDict.Count Then 'If not the last file in list
                        csFileLst = csFileLst & ","
                    End If
                Next
                'Pass VCF filepath and test details to python script to parse VCF and insert records into Moka NGSVariants table
                Dim wsh As Object
                Set wsh = CreateObject("WScript.Shell")
                pythonPath = "\\gstt.local\Shared\Genetics_Data2\Array\Software\Python\python.exe"
                scriptPath = "\\gstt.local\Apps\Moka\Files\Software\VCFImport\VCFImport.py"
                'Execute python script with required arguments. "2>&1" at the end redirects StdErr (2) to StdOut (1)
                Set wshexec = wsh.Exec("cmd.exe /S /C " & pythonPath & " " & scriptPath & " """ & csFileLst & """ " & patID & " " & NGSTestID & " 2>&1")
                'DoEvents pauses VBA until python script has finished running. wshexec.status is 0 while running and 1 when finished
                Do While wshexec.status = 0
                    DoEvents
                Loop
                'Capture any error messages from python script (StdErr has been redirected to StdOut, see above)
                errReport = wshexec.StdOut.ReadAll()
                If errReport <> "" Then
                    MsgBox "The following error was encountered when attempting to import variants from VCF: " & vbNewLine & vbNewLine & errReport, vbCritical, "ERROR"
                Else
                    newDir = destDir & batch & "\" 'Files will be copied to WES batch folder on F: drive
                    If Len(Dir(newDir, vbDirectory)) = 0 Then
                        MkDir newDir 'If WES batch folder doesn't already exist, create it
                    End If
                    'Loop through dictionary of VCFs, and move files to F: drive
                    For Each strKey In vcfDict.keys()
                        filename = vcfDict(strKey)
                        filepath = vcfBaseDir & filename
                        'Get the panelType from dictionary key. If Primarypanel or Secondarypanel, change to 'Primary' or 'Secondary'
                        PanelType = strKey
                        If PanelType = "Primarypanel" Then
                            PanelType = "Primary"
                        ElseIf PanelType = "Secondarypanel" Then
                            PanelType = "Secondary"
                        End If
                        'Copy file to F: drive, add to the NGSTestFiles table, and remove original file from S: drive
                        Set newNGSTestFile = New ADODB.Recordset
                        todayDate = Format(Now(), "dd/mmm/yyyy Hh:Nn:ss")
                        'Create a new record in the NGSTestFile table and retrieve the auto increment ID for newly inserted record
                        sqlNewNGSFile = "INSERT INTO NGSTestFile (NGSTestID, Description, DateAdded, VCF_Filter_Import) VALUES (" & NGSTestID & ", " & "'Ingenuity VCF Output - " & PanelType & "', #" & todayDate & "#, -1)"
                        newNGSTestFile.Open sqlNewNGSFile, CurrentProject.Connection, adOpenKeyset
                        newNGSTestFile.Open "SELECT @@identity", CurrentProject.Connection, adOpenKeyset 'Get ID of new entry
                        NGSTestFileID = newNGSTestFile.Fields(0).Value
                        'Add the auto increment ID to the end of the filename (before file extension) to ensure every file has a unique name, then copy file to F: drive.
                        dotIndx = InStrRev(filename, ".") 'Index of the start of file extension
                        filenameNoExt = Left(filename, dotIndx - 1) 'Original filename without extension
                        fileExt = Right(filename, Len(filename) - (dotIndx - 1)) 'File extension including dot
                        newFileName = filenameNoExt & "_" & NGSTestFileID & fileExt
                        FileCopy filepath, newDir & newFileName 'Copy file to the F: drive
                        Set rsAddCat = Nothing
                        'Update the NGSTestFile record with the file path of the copied file, and record in patient log
                        un = VBA.Environ("USERNAME")
                        cn = VBA.Environ("COMPUTERNAME")
                        sqlAddFilePath = "UPDATE NGSTestFile SET NGSTestFile = '" & newDir & newFileName & "' WHERE NGSTestFileID = " & NGSTestFileID
                        sqlPatLogVar = "INSERT INTO PatientLog (InternalPatientID, LogEntry, [Date], Login, PCName) VALUES (" & patID & ", 'NGS: Variants uploaded to NGSVariants table from Ingenuity VCF Output - " & PanelType & ". (NGSTest ID: " & NGSTestID & ")', #" + todayDate + "#,'" + un + "','" + cn + "')"
                        sqlPatLogVCF = "INSERT INTO PatientLog (InternalPatientID, LogEntry, [Date], Login, PCName) VALUES (" & patID & ", 'NGS: Ingenuity VCF Output - " & PanelType & " attached. (NGSTestFile ID: " & NGSTestFileID & ")', #" + todayDate + "#,'" + un + "','" + cn + "')"
                        DoCmd.SetWarnings False
                        DoCmd.RunSQL sqlAddFilePath
                        DoCmd.RunSQL sqlPatLogVar
                        DoCmd.RunSQL sqlPatLogVCF
                        DoCmd.SetWarnings True
                        'Remove original file
                        Kill filepath
                    Next
                    'Find number of other variants within +/- 2bp and add to NGSVariant table so it can be displayed in subform
                    'Have to do it this way because calculating the count on the fly in subform recordsource query makes the subform read only, so classifcation, comments etc. can't be updated
                    'This is recalculated every time the results form is opened, so up to date number is always displayed to user.
                    Me.Refresh 'Refresh is required to sync imported variants from Python script
                    Dim sqlPrevVars As String
                    Dim rsPrevVars As ADODB.Recordset
                    'Query below returns the variant ID and number of previous records for each variant associated with this test.
                    sqlPrevVars = "SELECT NGSVariant.NGSVariantID, (SELECT Count(*) FROM NGSVariant WHERE NGSVariant.NGSTestID <> currentVar.NGSTestID AND NGSVariant.ChrID=currentVar.ChrID AND NGSVariant.Position_hg19>=(currentVar.Position_hg19-2) And NGSVariant.Position_hg19<=(currentVar.Position_hg19+2)) AS countPrev FROM NGSVariant AS currentVar INNER JOIN NGSVariant ON currentVar.NGSVariantID = NGSVariant.NGSVariantID WHERE NGSVariant.NGSTestID = " & NGSTestID
                    Set rsPrevVars = New ADODB.Recordset
                    rsPrevVars.Open sqlPrevVars, CurrentProject.Connection, adOpenKeyset
                    'For each variant, update the relVars field of NGSVariant table
                    While Not rsPrevVars.EOF
                        sqlUpdate = "UPDATE NGSVariant SET relVars = " & rsPrevVars.Fields("countPrev") & " WHERE NGSVariantID = " & rsPrevVars.Fields("NGSVariantID")
                        DoCmd.SetWarnings False
                        DoCmd.RunSQL sqlUpdate
                        DoCmd.SetWarnings True
                        rsPrevVars.MoveNext
                    Wend
                    Set rsPrevVars = Nothing
                    Me.Requery 'Requery subform
                End If
                Set wsh = Nothing
            End If
        End If
    End If
End Sub

Private Sub FilterImport_Click()

    Dim batch As String
    Dim dnaNum As String
    Dim patID
    Dim NGSTestID As Integer
    Dim PRU As String
    Dim filename As String
    Dim filepath As String
    Dim desBaseDir As String
    Dim newNGSTestFile As ADODB.Recordset
    Dim todayDate As String

    filtSrcDir = "\\gstt.local\Shared\Genetics\DNA LAB\Current\WES\Ingenuity_output\Filter_settings\"
    destDir = "\\gstt.local\Apps\Moka\Files\ngs\"
    batch = Me.WESBatch
    dnaNum = Me.txt_DNA
    PRU = Me.Parent.PatientID
    PRU = Replace(PRU, ":", "")
    patID = Me.Parent.InternalPatientID
    NGSTestID = Me.Parent.NGSTestID


    If IsNull(Me.WESBatch) Or IsNull(Me.txt_DNA) Then
        MsgBox "Please ensure DNA number and WES batch are assigned to sample before uploading variants", vbExclamation, "Assign DNA/Batch"
    Else
        'Check filter settings file with correct filename exists
        filtBasePath = filtSrcDir & batch & "DNA" & dnaNum & "PRU" & PRU & ".txt"
        matchFile = Dir(filtBasePath)
        If matchFile <> "" Then
            'Display filename and confirm user wants to proceed.
            filepath = filtSrcDir & matchFile
            proceed = MsgBox("The following filter settings file will be attached to this NGS Test:" & vbNewLine & vbNewLine & filepath & vbNewLine & vbNewLine & "Click OK to proceed.", vbOKCancel + vbInformation, "Confirm Correct File")
            If proceed = vbOK Then
                newDir = destDir & batch & "\" 'File will be copied to WES batch folder on F: drive
                If Len(Dir(newDir, vbDirectory)) = 0 Then
                    MkDir newDir 'If WES batch folder doesn't already exist, create it
                End If
                Set newNGSTestFile = New ADODB.Recordset
                todayDate = Format(Now(), "dd/mmm/yyyy Hh:Nn:ss")
                'Create a new record in the NGSTestFile table and retrieve the auto increment ID for newly inserted record
                sqlNewNGSFile = "INSERT INTO NGSTestFile (NGSTestID, Description, DateAdded, VCF_Filter_Import) VALUES (" & NGSTestID & ", " & "'Ingenuity Filter Settings', #" & todayDate & "#, -1)"
                newNGSTestFile.Open sqlNewNGSFile, CurrentProject.Connection, adOpenKeyset
                newNGSTestFile.Open "SELECT @@identity", CurrentProject.Connection, adOpenKeyset 'Get ID of new entry
                NGSTestFileID = newNGSTestFile.Fields(0).Value
                'Add the auto increment ID to the end of the filename (before file extension) to ensure every file has a unique name, then copy file to F: drive.
                dotIndx = InStrRev(matchFile, ".") 'Index of the start of file extension
                filenameNoExt = Left(matchFile, dotIndx - 1) 'Original filename without extension
                fileExt = Right(matchFile, Len(matchFile) - (dotIndx - 1)) 'File extension including dot
                newFileName = filenameNoExt & "_" & NGSTestFileID & fileExt
                FileCopy filepath, newDir & newFileName 'Copy file to the F: drive
                Set rsAddCat = Nothing
                'Update the NGSTestFile record with the file path of the copied file
                sqlAddFilePath = "UPDATE NGSTestFile SET NGSTestFile = '" & newDir & newFileName & "' WHERE NGSTestFileID = " & NGSTestFileID
                DoCmd.SetWarnings False
                DoCmd.RunSQL sqlAddFilePath
                DoCmd.SetWarnings True
                Me.Requery
                D = Format(Now(), "dd/mmm/yyyy Hh:Nn:ss")
                un = VBA.Environ("USERNAME")
                cn = VBA.Environ("COMPUTERNAME")
                sqlPatLogFil = "INSERT INTO PatientLog (InternalPatientID, LogEntry, [Date], Login, PCName) VALUES (" & patID & ", 'NGS: Ingenuity Filter Settings file attached. (NGSTestFile ID: " & NGSTestFileID & ")', #" + D + "#,'" + un + "','" + cn + "')"
                DoCmd.SetWarnings False
                DoCmd.RunSQL sqlPatLogFil
                DoCmd.SetWarnings True
                'If all processing above has completed without errors, remove the original file.
                Kill filepath
            End If
        Else
            MsgBox "No filter settings file found that matches test details. Filter settings file must be:" & vbNewLine & vbNewLine & _
            "1. Saved with filename format: " & batch & "DNA" & dnaNum & "PRU" & PRU & ".txt" & vbNewLine & _
            "2. Saved in the following directory: " & filtSrcDir, vbExclamation, "No Filter Settings Found"
        End If
     End If
End Sub

Private Sub RemoveAll_MouseDown(Button As Integer, Shift As Integer, x As Single, Y As Single)
    If Shift = acCtrlMask Then
        If MsgBox("WARNING: This will remove all variants for this WES test." & vbNewLine & vbNewLine & "Are you sure you REALLY want to proceed??", vbYesNo + vbExclamation, "WARNING") = vbYes Then
            D = Format(Now(), "dd/mmm/yyyy Hh:Nn:ss")
            un = VBA.Environ("USERNAME")
            cn = VBA.Environ("COMPUTERNAME")
            patID = Me.Parent.InternalPatientID
            Dim rsVarsForDel As ADODB.Recordset
            Set rsVarsForDel = New ADODB.Recordset
            sqlVarsForDel = "SELECT NGSVariant.NGSVariantID FROM NGSVariant WHERE NGSTestID = " & Me.Parent.NGSTestID
            rsVarsForDel.Open sqlVarsForDel, CurrentProject.Connection, adOpenKeyset
            While Not rsVarsForDel.EOF
                sqlMemo = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" + CStr(patID) + ", 2, " + CStr(rsVarsForDel.Fields("NGSVariantID")) + ",'Variant deleted.',#" + D + "#,'" + un + "','" + cn + "')"
                sqlPatLog = "INSERT INTO PatientLog (InternalPatientID, LogEntry, [Date], Login, PCName) VALUES (" & patID & ", 'NGS: Variant deleted. NGSVariantID: " & CStr(rsVarsForDel.Fields("NGSVariantID")) & "', #" + D + "#,'" + un + "','" + cn + "')"
                DoCmd.SetWarnings False
                DoCmd.RunSQL sqlMemo
                DoCmd.RunSQL sqlPatLog
                DoCmd.SetWarnings True
                rsVarsForDel.MoveNext
            Wend
            Set rsVarsForDel = Nothing
            Dim rsFilesForDel As ADODB.Recordset
            Set rsFilesForDel = New ADODB.Recordset
            sqlFilesForDel = "SELECT NGSTestFile.NGSTestID, NGSTestFile.Description FROM NGSTestFile WHERE NGSTestFile.NGSTestID = " & Me.Parent.NGSTestID & " AND NGSTestFile.VCF_Filter_Import = TRUE"
            rsFilesForDel.Open sqlFilesForDel, CurrentProject.Connection, adOpenKeyset
            While Not rsFilesForDel.EOF
                sqlPatLog = "INSERT INTO PatientLog (InternalPatientID, LogEntry, [Date], Login, PCName) VALUES (" & patID & ", 'NGS: File removed from NGS test record. (NGSTestFile Description: " & rsFilesForDel.Fields("Description") & ", NGSTestID: " & rsFilesForDel.Fields("NGSTestID") & ")', #" + D + "#,'" + un + "','" + cn + "')"
                DoCmd.SetWarnings False
                DoCmd.RunSQL sqlPatLog
                DoCmd.SetWarnings True
                rsFilesForDel.MoveNext
            Wend
            Set rsFilesForDel = Nothing
            sqlRemoveAnnot = "DELETE FROM NGSVariantAnnotations WHERE NGSVariantAnnotations.NGSVariantAnnotationsID IN (SELECT NGSVariantAnnotations.NGSVariantAnnotationsID FROM NGSVariant INNER JOIN NGSVariantAnnotations ON NGSVariant.NGSVariantID = NGSVariantAnnotations.NGSVariantID WHERE NGSVariant.NGSTestID = " & Me.Parent.NGSTestID & ")"
            sqlRemoveVars = "DELETE FROM NGSVariant WHERE NGSVariant.NGSTestID = " & Me.Parent.NGSTestID
            sqlRemoveFiles = "DELETE FROM NGSTestFile WHERE NGSTestFile.NGSTestID = " & Me.Parent.NGSTestID & " AND NGSTestFile.VCF_Filter_Import = TRUE"
            DoCmd.SetWarnings False
            DoCmd.RunSQL sqlRemoveAnnot
            DoCmd.RunSQL sqlRemoveVars
            DoCmd.RunSQL sqlRemoveFiles
            DoCmd.SetWarnings True
            Me.Requery
        End If
    Else
        MsgBox "If you REALLY want to delete all variants, you must press Ctrl when clicking the button", vbExclamation, ""
    End If
End Sub

Private Sub comb_WESResultBuild_AfterUpdate()
    Dim Q As ADODB.Recordset
    Dim S As String
    Dim dt As String
    Dim usr As String
    Dim cn As String
    dt = Format(Now, "dd/mmm/yyyy Hh:Nn:ss")
    usr = VBA.Environ("USERNAME")
    cn = VBA.Environ("COMPUTERNAME")
    Set Q = New ADODB.Recordset
    If IsNull([WESResultBuild]) Then
        S = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Genome build deleted for test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
    Else
        S = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Genome build changed to Item ID: " + CStr(Me![WESResultBuild]) + " for test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
    End If
    Q.Open S, CurrentProject.Connection
    Set Q = Nothing
End Sub


Private Sub btn_Phenotips_Click()
    Call firefoxurl("http://10.188.197.57:8080/phenotips/bin/")
    'TO DO ||||||||||||||||||||||||||| look up API to search for PRU
End Sub


Private Sub btn_ResultSheeet_Click()
'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
' Currently Hidden
'
'        Dim D As String
'        Dim usr As String
'        Dim cn As String
'        Dim S As String
'        D = Format(Now, "dd/mmm/yyyy Hh:Nn:ss")
'        usr = VBA.Environ("USERNAME")
'        cn = VBA.Environ("COMPUTERNAME")
'        S = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'Moka result sheet generated for specimen " + Me!txt_DNA + "',#" + D + "#,'" + usr + "','" + cn + "')"
'        DoCmd.SetWarnings False
'        DoCmd.RunSQL S
'        Debug.Print S
'        DoCmd.SetWarnings True
'
'        DoCmd.DoMenuItem acFormBar, acRecordsMenu, 5, , acMenuVer70
'
'        Dim stDocName As String
'        Dim stLinkCriteria As String
''\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ NEED TO Optimise for NGS \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
'        stDocName = "FamilyResults_Auto_R"
'        stLinkCriteria = CStr(Me![txt_DNA])
'        DoCmd.OpenReport stDocName, acViewPreview, , stLinkCriteria
End Sub

Private Sub Checker1_GotFocus()
 If Me.StatusID <> 4 Then ' \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ CHECK STATUS ID \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    msga = MsgBox("Update WES Test status to Complete to proceed", vbOKOnly Or vbExclamation, "ATTENTION")
    Me.StatusID.SetFocus
End If
End Sub


Private Sub Checker1_AfterUpdate()
    Dim rs As ADODB.Recordset
    Dim plSQL As String
    Dim dt As String
    Dim usr As String
    Dim cmp As String

    Set rs = New ADODB.Recordset
    dt = Format(Now, "dd/mmm/yyyy Hh:Nn:ss")
    usr = VBA.Environ("USERNAME")
    cmp = VBA.Environ("COMPUTERNAME")


    If IsNull(Me.txt_result) Then
        msg_a = MsgBox("No Result has been entered for this WES test", vbOKOnly Or vbExclamation, "ATTENTION")
        Me.Checker1 = Null

    ElseIf IsNull([Checker1]) Then
        plSQL = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Initials for analysis removed for NGS test " + CStr(Me![NGSTestID]) + " requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cmp + "')"
        Me![txt_Check1Date] = Null
        Me![txt_Check1Date].Requery
        If Not IsNull([Checker2]) Then
            pl2SQL = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Initials (ID:" + CStr(Me![Checker2]) + ")  for checking result page removed for NGS test " + CStr(Me![NGSTestID]) + " requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cmp + "')"
            Me![Checker2] = Null
            Me![txt_Check2Date] = Null
            Me![Checker2].Requery
            Me![txt_Check2Date].Requery
        rs.Open pl2SQL, CurrentProject.Connection
        End If
    Else
        plSQL = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Analysis entered by " + Me![Checker1].Column(1) + " for test " + CStr(Me![NGSTestID]) + " requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cmp + "')"
        Me![txt_Check1Date] = Now()
        Me.[txt_Check1Date].Requery
    End If
    rs.Open plSQL, CurrentProject.Connection

    Set rs = Nothing

End Sub

'checks checker 1 ID has been entered before permitting approval (checker 2). Updates patient log accordingly,
Private Sub Checker2_AfterUpdate()
    Dim rs As ADODB.Recordset
    Dim plSQL As String
    Dim dt As String
    Dim usr As String
    Dim cmp As String

    Set rs = New ADODB.Recordset
    dt = Format(Now, "dd/mmm/yyyy Hh:Nn:ss")
    usr = VBA.Environ("USERNAME")
    cmp = VBA.Environ("COMPUTERNAME")

    If IsNull(Me![Checker1]) Then
        MsgBox "Unable to comfirm analysis check until checker1 intials are entered ", , "No Record For Checker1 Entered"
                   Me![Checker2] = Null
           Me![Checker2].Requery
           Me![txt_Check2Date] = Null
           Me![txt_Check2Date].Requery


    ElseIf Me.[Checker2] = Me.[Checker1] Then
           MsgBox "Checker 2 must be different from Checker 1  ", vbOKOnly Or vbExclamation, "Attention"
           Me![Checker2] = Null
           Me![Checker2].Requery
           Me![txt_Check2Date] = Null
           Me![txt_Check2Date].Requery

    Else

        If IsNull([Checker2]) Then
            plSQL = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Initials for checking result page removed for NGS test " + CStr(Me![NGSTestID]) + " requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cmp + "')"
            Me![txt_Check2Date] = Null
            Me![txt_Check2Date].Requery
        Else
            plSQL = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Result page checked by  " + Me![Checker2].Column(1) + " for test " + CStr(Me![NGSTestID]) + " requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cmp + "')"
            Me![txt_Check2Date] = Now()
            Me.[txt_Check2Date].Requery
            Me.Parent.[SafetyCheck].Value = True

        End If
        rs.Open plSQL, CurrentProject.Connection
    End If
    Set rs = Nothing
End Sub

Private Sub ResultCode_AfterUpdate()
    Dim Q As ADODB.Recordset
    Dim S As String
    Dim dt As String
    Dim usr As String
    Dim cn As String
    dt = Format(Now, "dd/mmm/yyyy Hh:Nn:ss")
    usr = VBA.Environ("USERNAME")
    cn = VBA.Environ("COMPUTERNAME")
    Set Q = New ADODB.Recordset
    If IsNull([ResultCode]) Then
        S = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Result code deleted for test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
    Else
        S = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Result code changed to " + Me![ResultCode].Column(1) + " for test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
    End If
    Q.Open S, CurrentProject.Connection
    Set Q = Nothing
End Sub

Private Sub StatusID_AfterUpdate()
' Log status change
    Dim Q As ADODB.Recordset
    Dim L As String
    Dim dt As String
    Dim usr As String
    Dim cn As String
'overall patient result settings
    Dim rs As ADODB.Recordset
    Dim P As ADODB.Recordset
    Dim U As ADODB.Recordset
    Dim r As String
    Dim S As String
    Dim t As String
    Dim V As String
    Dim w As String
    Dim x As String
    Dim Y As String
    Dim z As String
    Dim m As String
    Set Q = New ADODB.Recordset

    dt = Format(Now, "dd/mmm/yyyy Hh:Nn:ss")
    usr = VBA.Environ("USERNAME")
    cn = VBA.Environ("COMPUTERNAME")

    ' Add in record to patient log
 If IsNull(Me.StatusID) Then
    msga = MsgBox("No test status selected", vbOKOnly Or vbExclamation, "ATTENTION")
    L = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Status updated to NULL for test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
    Me.txt_result.Locked = False
    Me.ResultCode.Locked = False

 ElseIf Me.StatusID <> 4 And Not IsNull(Me.Checker1) Then
    'log status change
    L = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Status updated to " + Me![StatusID].Column(1) + " for test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
    Me.Parent.Form.Requery ' set header feild

' change checker 1 add in log of checker ID change when test status does not equal complete

    Dim plSQL As String
    Set rs = New ADODB.Recordset
    plSQL = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Initials for analysis removed for NGS test " + CStr(Me![NGSTestID]) + " requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cmp + "')"
    Me![Checker1] = Null
    Me![Checker1].Requery
    Me![Checker2] = Null
    Me![Checker2].Requery
    Me![txt_Check1Date] = Null
    Me![txt_Check1Date].Requery
    Me![txt_Check2Date] = Null
    Me![txt_Check2Date].Requery
    Set rs = Nothing

Else
    'log test status change
    L = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Status updated to " + Me![StatusID].Column(1) + " for test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
    Me.Parent.Form.Requery
    Me.txt_result.Locked = False
    Me.ResultCode.Locked = False

'\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ CHECK THIS IS THE WANTED STATUS!! |||||||||||||||||||||||||||||||||
    'check a test result is entered before status is set to compleate
    If Me.StatusID = 4 And IsNull(Me.txt_result) Then
        msgb = MsgBox("No result has been entered for this WES test." + vbNewLine + "WES Test status can not be set to COMPLETE", vbOKOnly Or vbExclamation, "Test Status Not Valid")
        Me.StatusID = Null

    ElseIf Me.StatusID = 4 And Not IsNull(Me.txt_result) Then ' \\\\\\\\\ status 4 = COMPLETE
    'auto update overal patient result when test status is recored as compleated. Update patient result code if a result code has been enetered. Lock down test resluts
        Set P = New ADODB.Recordset
        Set U = New ADODB.Recordset
        Set rs = New ADODB.Recordset

        x = Me.InternalPatientID
        Y = Me.txt_result
        r = "SELECT OverallResultComments FROM Patients WHERE InternalPatientID = " + x + ""
        P.Open r, CurrentProject.Connection, adOpenKeyset, adLockOptimistic, adCmdText

        If Not IsNull(P!OverallResultComments) Then
            t = P!OverallResultComments
            S = "" + t + "," + Y + ""
        Else: S = "" + Y + ""
        End If
        P!OverallResultComments = S
        P.Update

        If Not IsNull(Me.[ResultCode].Column(1)) Then
            Dim Pa As ADODB.Recordset
            Dim Ua As ADODB.Recordset
            Set Pa = New ADODB.Recordset
            Set Ua = New ADODB.Recordset

            z = "SELECT OverallResultCodeID FROM Patients WHERE InternalPatientID = " & Me.InternalPatientID & ""
            Pa.Open z, CurrentProject.Connection, adOpenKeyset, adLockOptimistic, adCmdText
            Pa!OverallResultCodeID = Me.ResultCode
            Pa.Update
            m = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'Patient: Result code changed to [" + Me.[ResultCode].Column(1) + "]',#" + dt + "#,'" + usr + "','" + cn + "')"
            Ua.Open m, CurrentProject.Connection
            Set Pa = Nothing
            Set Ua = Nothing
        End If


        V = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'Patient: Result changed to [" + S + "]',#" + dt + "#,'" + usr + "','" + cn + "')"
        w = "INSERT INTO PrevOverallResult(InternalPatientID, OverallResult, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",' WES result: " + Me![txt_result] + "', #" + dt + "#,'" + usr + "','" + cn + "');"
                Debug.Print ""
                Debug.Print ""
                Debug.Print V
                Debug.Print ""
                Debug.Print w
        U.Open V, CurrentProject.Connection
        rs.Open w, CurrentProject.Connection

        Set P = Nothing
        Set U = Nothing

        Me.ResultCode.Locked = True
        Me.txt_result.Locked = True
        Me.Parent.Form.Requery
        End If
    End If
    Q.Open L, CurrentProject.Connection
    Set Q = Nothing
End Sub

Private Sub txt_result_AfterUpdate()

    Dim L As String
    Dim dt As String
    Dim usr As String
    Dim cn As String
    Dim Q As ADODB.Recordset
    Set Q = New ADODB.Recordset

    dt = Format(Now, "dd/mmm/yyyy Hh:Nn:ss")
    usr = VBA.Environ("USERNAME")
    cn = VBA.Environ("COMPUTERNAME")

' Update Patient log for change in NGS test record
    If IsNull(Me.txt_result) Then
        L = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Test result deleted for WES test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
        Me![StatusID].Value = Null
    Else
        L = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Test result changed to " + Me![txt_result] + " for WES test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
        End If
    Q.Open L, CurrentProject.Connection
    Set Q = Nothing

    If IsNull(Me.comb_WESResultBuild) Then
        MsgBox "Genome build not specified!", VbMsgBoxStyle.vbOKOnly Or VbMsgBoxStyle.vbExclamation, "Attention"
        End If


End Sub


Private Sub txt_Resultcmt_AfterUpdate()
' NGS test results comments/ observations record
    Dim Q As ADODB.Recordset
    Dim r As ADODB.Recordset
    Dim S As String
    Dim t As String
    Dim dt As String
    Dim usr As String
    Dim cn As String

    dt = Format(Now, "dd/mmm/yyyy Hh:Nn:ss")
    usr = VBA.Environ("USERNAME")
    cn = VBA.Environ("COMPUTERNAME")
    Set Q = New ADODB.Recordset

    'Debug.Print Me.txt_Resultcmt

    ' Insert record and comment into PatientLog memo which can then be recalled later with input info.
    If IsNull(Me.txt_Resultcmt) Then
        'Debug.Print "If null test"
        S = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ", 3," + CStr(Me![NGSTestID]) + ",'NGS WES test: Result comment deleted for WES test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
        'Debug.Print S
    Else
        Dim rc As String
        'Debug.Print " test"
        rc = Replace(Me![txt_Resultcmt], "'", "''")
        S = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ", 3, " + CStr(Me![NGSTestID]) + ",'NGS WES test: Result comment updated for WES test requested " + CStr(Me![DateRequested]) + " - " + rc + "',#" + dt + "#,'" + usr + "','" + cn + "')"
        'Debug.Print S
    End If
    Q.Open S, CurrentProject.Connection
    Set Q = Nothing

    ' Record input in the patient log
    Set r = New ADODB.Recordset
    If IsNull([txt_Resultcmt]) Then
        t = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Result comment deleted for WES test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
    Else
        t = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Result comment updated for WES test requested " + CStr(Me![DateRequested]) + " - see memo log',#" + dt + "#,'" + usr + "','" + cn + "')"
    End If
    r.Open t, CurrentProject.Connection
    Set r = Nothing

End Sub

Private Sub txt_Resultcmt_DblClick(Cancel As Integer)
' View past comment history for test
Me.Dirty = False
Dim stDocName As String
    stDocName = "s0901_NGSLogMemo"
    stLinkCriteria = "[Type] = 3 AND [LinkID] = " & Me![NGSTestID]
    DoCmd.OpenForm stDocName, acFormDS, , stLinkCriteria
End Sub
