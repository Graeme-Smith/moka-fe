Option Compare Database

Private Sub btn_Coverage_Click()

If Not IsNull(Me.DNA) Then
    
    ''call python script and pass through arguments
    ' define the variables to feed to script
    Dim Path As String
    Dim Cmd As String
    Dim DNANumber As String
    Dim TotalCmd As String
        
    'set path to script
    Path = """F:\Moka\Files\Software\depthofcoverage\import_depth_of_coverage.py"""

    'get DNA number
    DNANumber = Me.DNA

    'set the commands to run script (eve.py, input file and output dir) taking into account the quotations etc needed due to spaces in file paths
    Cmd = Path & " -d " & DNANumber

    'combine all to make totalCmd NB /K can be used for the cmd line window to remain after it has run - good for debugging - but may cause it to hang
    ' note 2>&1 which combines stderr and stdout
    TotalCmd = "cmd.exe /S /C \\gstt.local\shared\Genetics_Data2\Array\Software\Python\python.exe " & Cmd & " 2>&1"
    
    'Create shell object
    Dim wsh As Object
    Set wsh = CreateObject("WScript.Shell")
    
    ' settings to have cmd box visible while running
    'Dim waitOnReturn As Boolean: waitOnReturn = True
    'Dim windowStyle As Integer: windowStyle = 1
    
    ' use .Exec not .Run so can access the stdout
    Set wshexec = wsh.Exec(TotalCmd)
    'DoEvents pauses VB script until EvE has finished running. wshexec.status is 0 while running 1 when finished
    ' and 2 when errored so could use a if statement but have combined stderr and stdout above so no need.
    Do While wshexec.Status = 0
        DoEvents
    Loop
    
    'report captures stdout
    Dim Report As String
    Report = wshexec.StdOut.ReadAll()
    
    'display in MsgBox
    MsgBox Report

    End If


End Sub

Private Sub Form_Current()

grey = RGB(153, 153, 153)
black = RGB(0, 0, 0)

' Format checker2 combo box so that it is only be editable once checker 1 has been signed off.
If IsNull(Me.Checker1) Or IsNull(txt_Check1Date) Then
    Me.Checker2.Enabled = False
    Me.txt_Check2Date.Enabled = False
    Me!Label26.ForeColor = grey
Else
    Me.Checker2.Enabled = True
    Me.txt_Check2Date.Enabled = True
    Me!Label26.ForeColor = black
End If

' format checker 3 combo box(reporter) so that it is only be visible once a test has been analysis and variants confimed
    
If Not IsNull(Me.Checker1) And Not IsNull(txt_Check1Date) And Not IsNull(Checker3) Then
    Me.Checker3.Enabled = True
    Me.txt_Check3Date.Enabled = True
    Me!Label38.ForeColor = black
    Me!Label56.ForeColor = black

ElseIf Not IsNull(Me.Checker1) Or Not IsNull(txt_Check1Date) And (StatusID = 1202218811 Or StatusID = 1202218812 Or StatusID = 1202218813) Then
    Me.Checker3.Enabled = True
    Me.txt_Check3Date.Enabled = True
    Me!Label38.ForeColor = black
    Me!Label56.ForeColor = black
    
Else
    Me.Checker3.Enabled = False
    Me.txt_Check3Date.Enabled = False
    Me!Label38.ForeColor = grey
    Me!Label56.ForeColor = grey
End If

' format checker 4 combo box(approver) so that it is only be visible once a test has been reported
If Not IsNull(Me.Checker1) And Not IsNull(txt_Check1Date) And Not IsNull(Checker3) Then
    Me.Checker4.Enabled = True
    Me.txt_Check4Date.Enabled = True
    Me!Label63.ForeColor = black
    Me!Label64.ForeColor = black
Else
    Me.Checker4.Enabled = False
    Me.txt_Check4Date.Enabled = False
    Me!Label63.ForeColor = grey
    Me!Label64.ForeColor = grey
End If
End Sub


Private Sub Form_Load()
' If genome build has not been set, set to default  109 = HG19
If IsNull(Me![comb_WESResultBuild]) Then
    Me!comb_WESResultBuild = 109
End If

'Find number of other variants within +/- 2bp and add to NGSVariant table
Dim sqlPrevVars As String
Dim rsPrevVar As ADODB.Recordset
sqlPrevVars = "SELECT NGSVariant.NGSVariantID, (SELECT Count(*) FROM NGSVariant WHERE NGSVariant.NGSTestID <> currentVar.NGSTestID AND NGSVariant.ChrID=currentVar.ChrID AND NGSVariant.Position_hg19>=(currentVar.Position_hg19-2) And NGSVariant.Position_hg19<=(currentVar.Position_hg19+Len(currentVar.ref)+1)) AS countPrev FROM NGSVariant AS currentVar INNER JOIN NGSVariant ON currentVar.NGSVariantID = NGSVariant.NGSVariantID WHERE NGSVariant.NGSTestID = " & Me.Parent.NGSTestID
Set rsPrevVar = New ADODB.Recordset
rsPrevVar.Open sqlPrevVars, CurrentProject.Connection, adOpenKeyset
While Not rsPrevVar.EOF
    sqlUpdate = "UPDATE NGSVariant SET relVars = " & rsPrevVar.Fields("countPrev") & " WHERE NGSVariantID = " & rsPrevVar.Fields("NGSVariantID")
    DoCmd.SetWarnings False
    DoCmd.RunSQL sqlUpdate
    DoCmd.SetWarnings True
    rsPrevVar.MoveNext
Wend
Set rsPrevVar = Nothing
Me.Requery 'Update variant subform


'lock down result feld if test statusID = reported, completed or failed
If Me.StatusID = 4 Or Me.StatusID = 1202218814 Or Me.StatusID = 1202218815 Or Me.StatusID = 1202218816 Then
        Me.Parent.txt_result.Locked = True
Else
        Me.Parent.txt_result.Locked = False
End If

End Sub


Private Sub RemoveAll_MouseDown(Button As Integer, Shift As Integer, x As Single, Y As Single)
    If Shift = acCtrlMask Then
        If MsgBox("WARNING: This will remove all variants for this WES test." & vbNewLine & vbNewLine & "Are you sure you REALLY want to proceed??", vbYesNo + vbExclamation, "WARNING") = vbYes Then
            D = Format(Now(), "dd/mmm/yyyy Hh:Nn:ss")
            un = VBA.Environ("USERNAME")
            cn = VBA.Environ("COMPUTERNAME")
            patID = Me.Parent.InternalPatientID
            Dim rsVarsForDel As ADODB.Recordset
            Set rsVarsForDel = New ADODB.Recordset
            sqlVarsForDel = "SELECT NGSVariant.NGSVariantID FROM NGSVariant WHERE NGSTestID = " & Me.Parent.NGSTestID
            rsVarsForDel.Open sqlVarsForDel, CurrentProject.Connection, adOpenKeyset
            While Not rsVarsForDel.EOF
                sqlMemo = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" + CStr(patID) + ", 2, " + CStr(rsVarsForDel.Fields("NGSVariantID")) + ",'Variant deleted.',#" + D + "#,'" + un + "','" + cn + "')"
                sqlPatLog = "INSERT INTO PatientLog (InternalPatientID, LogEntry, [Date], Login, PCName) VALUES (" & patID & ", 'NGS: Variant deleted. NGSVariantID: " & CStr(rsVarsForDel.Fields("NGSVariantID")) & "', #" + D + "#,'" + un + "','" + cn + "')"
                DoCmd.SetWarnings False
                DoCmd.RunSQL sqlMemo
                DoCmd.RunSQL sqlPatLog
                DoCmd.SetWarnings True
                rsVarsForDel.MoveNext
            Wend
            Set rsVarsForDel = Nothing
            Dim rsFilesForDel As ADODB.Recordset
            Set rsFilesForDel = New ADODB.Recordset
            sqlFilesForDel = "SELECT NGSTestFile.NGSTestID, NGSTestFile.Description FROM NGSTestFile WHERE NGSTestFile.NGSTestID = " & Me.Parent.NGSTestID & " AND NGSTestFile.VCF_Filter_Import = TRUE"
            rsFilesForDel.Open sqlFilesForDel, CurrentProject.Connection, adOpenKeyset
            While Not rsFilesForDel.EOF
                sqlPatLog = "INSERT INTO PatientLog (InternalPatientID, LogEntry, [Date], Login, PCName) VALUES (" & patID & ", 'NGS: File removed from NGS test record. (NGSTestFile Description: " & rsFilesForDel.Fields("Description") & ", NGSTestID: " & rsFilesForDel.Fields("NGSTestID") & ")', #" + D + "#,'" + un + "','" + cn + "')"
                DoCmd.SetWarnings False
                DoCmd.RunSQL sqlPatLog
                DoCmd.SetWarnings True
                rsFilesForDel.MoveNext
            Wend
            Set rsFilesForDel = Nothing
            sqlRemoveAnnot = "DELETE FROM NGSVariantAnnotations WHERE NGSVariantAnnotations.NGSVariantAnnotationsID IN (SELECT NGSVariantAnnotations.NGSVariantAnnotationsID FROM NGSVariant INNER JOIN NGSVariantAnnotations ON NGSVariant.NGSVariantID = NGSVariantAnnotations.NGSVariantID WHERE NGSVariant.NGSTestID = " & Me.Parent.NGSTestID & ")"
            sqlRemoveVars = "DELETE FROM NGSVariant WHERE NGSVariant.NGSTestID = " & Me.Parent.NGSTestID
            sqlRemoveFiles = "DELETE FROM NGSTestFile WHERE NGSTestFile.NGSTestID = " & Me.Parent.NGSTestID & " AND NGSTestFile.VCF_Filter_Import = TRUE"
            DoCmd.SetWarnings False
            DoCmd.RunSQL sqlRemoveAnnot
            DoCmd.RunSQL sqlRemoveVars
            DoCmd.RunSQL sqlRemoveFiles
            DoCmd.SetWarnings True
            Me.Requery
        End If
    Else
        MsgBox "If you REALLY want to delete all variants, you must press Ctrl when clicking the button", vbExclamation, ""
    End If
End Sub



Private Sub txt_Resultcmt_GotFocus()
    Me.txt_Resultcmt.SelLength = 0
End Sub

Private Sub VCFImport_Click()
    Dim vcfBaseDir As String
    Dim batch As String
    Dim dnaNum As String
    Dim patID
    Dim NGSTestID As Integer
    Dim PRU As String
    Dim filename As String
    Dim filepath As String
    Dim errReport As String
    Dim desBaseDir As String
    Dim newNGSTestFile As ADODB.Recordset
    Dim TodayDate As String
    Dim vcfDict
    Dim PanelType As String
    
    vcfBaseDir = "\\gstt.local\Shared\Genetics\DNA LAB\Current\WES\Ingenuity_output\Results\"
    destDir = "\\gstt.local\Apps\Moka\Files\ngs\"
    PRU = Me.Parent.PatientID
    PRU = Replace(PRU, ":", "")
    patID = Me.Parent.InternalPatientID
    NGSTestID = Me.Parent.NGSTestID
    year_dir = destDir & Year(Now()) & "\"
    month_dir = year_dir & Month(Now()) & "\"
    
    If IsNull(Me.WESBatch) Or IsNull(Me.txt_DNA) Then
        MsgBox "Please ensure DNA number and WES batch are assigned to sample before uploading variants", vbExclamation, "Assign DNA/Batch"
    Else
        batch = Me.WESBatch
        dnaNum = Me.txt_DNA
        basePath = vcfBaseDir & batch & "DNA" & dnaNum & "PRU" & PRU & "-*.vcf" 'VCFs will have variable suffix after hyphen, so wildcard (*) used
        Set vcfDict = CreateObject("scripting.dictionary")
        VCFfilename = Dir(basePath) 'Returns recordset of each matching filename
        Do While VCFfilename <> "" 'Loop until no more files
            PanelType = Split(VCFfilename, "-")(1) 'Retrieve the panel type from current file (between first and second hyphen)
            'add 'panel type: filename' to dictionary. If the panel type is already in dictionary display an error message and exit.
            If Not vcfDict.exists(PanelType) Then
                vcfDict.Add PanelType, VCFfilename
            Else
                MsgBox ("Multiple VCF files found of type: " & PanelType & ". Unable to continue with import")
                Exit Sub
            End If
            VCFfilename = Dir 'Moves to next filename in record
        Loop
        If vcfDict.Count = 0 Then 'If no VCF files found, display error message and exit
            MsgBox "No VCF files found that match test details. Ingenuity results must be:" & vbNewLine & vbNewLine & _
            "1. Exported in VCF format" & vbNewLine & _
            "2. Saved with filename format: " & batch & "DNA" & dnaNum & "PRU" & PRU & "-<panel description>-<numerical suffix>.vcf" & vbNewLine & _
            "3. Saved in the following directory: " & vcfBaseDir, vbExclamation, "No VCF Files Found"
        Else 'Build a string to show user which files will be imported if they continue
            filesStr = "The files below will be imported." & vbNewLine & vbNewLine & "Primary panel:" & vbNewLine & vbNewLine & vbTab
            If vcfDict.exists("Primarypanel") Then
                filesStr = filesStr & vcfDict("Primarypanel")
            Else
                filesStr = filesStr & "None"
            End If
            filesStr = filesStr & vbNewLine & vbNewLine & "Secondary panel:" & vbNewLine & vbNewLine & vbTab
            If vcfDict.exists("Secondarypanel") Then
                filesStr = filesStr & vcfDict("Secondarypanel")
            Else
                filesStr = filesStr & "None"
            End If
            filesStr = filesStr & vbNewLine & vbNewLine & "Phenotype panel:" & vbNewLine & vbNewLine & vbTab
            If vcfDict.exists("Phenotype") Then
                filesStr = filesStr & vcfDict("Phenotype")
            Else
                filesStr = filesStr & "None"
            End If
            filesStr = filesStr & vbNewLine & vbNewLine & "Additional panels:" & vbNewLine
            otheVCFcount = 0
            For Each strKey In vcfDict.keys()
                If strKey <> "Primarypanel" And strKey <> "Secondarypanel" And strKey <> "Phenotype" Then
                    filesStr = filesStr & vbNewLine & vbTab & vcfDict(strKey)
                    otherVCFcount = otherVCFcount + 1
                End If
            Next
            If otherVCFcount = 0 Then
                filesStr = filesStr & vbNewLine & vbTab & "None"
            End If
            'Display the list of files that will be imported and give user option to cancel
            If MsgBox(filesStr & vbNewLine & vbNewLine & "Do you wish to continue?", vbYesNo + vbInformation, "Continue?") = vbYes Then
                'Create comma separated string of filepaths to pass to python script
                csFileLst = ""
                loopCount = 0
                For Each strKey In vcfDict.keys()
                loopCount = loopCount + 1
                    csFileLst = csFileLst & vcfBaseDir & vcfDict(strKey)
                    If loopCount <> vcfDict.Count Then 'If not the last file in list
                        csFileLst = csFileLst & ","
                    End If
                Next
                'Pass VCF filepath and test details to python script to parse VCF and insert records into Moka NGSVariants table
                Dim wsh As Object
                Set wsh = CreateObject("WScript.Shell")
                pythonPath = "\\gstt.local\Shared\Genetics_Data2\Array\Software\Python\python.exe"
                scriptPath = "\\gstt.local\Apps\Moka\Files\Software\VCFImport\VCFImport.py"
                'Execute python script with required arguments. "2>&1" at the end redirects StdErr (2) to StdOut (1)
                Set wshexec = wsh.Exec("cmd.exe /S /C " & pythonPath & " " & scriptPath & " """ & csFileLst & """ " & patID & " " & NGSTestID & " 2>&1")
                'DoEvents pauses VBA until python script has finished running. wshexec.status is 0 while running and 1 when finished
                Do While wshexec.Status = 0
                    DoEvents
                Loop
                'Capture any error messages from python script (StdErr has been redirected to StdOut, see above)
                errReport = wshexec.StdOut.ReadAll()
                If errReport <> "" Then
                    MsgBox "The following error was encountered when attempting to import variants from VCF: " & vbNewLine & vbNewLine & errReport, vbCritical, "ERROR"
                Else
                    newDir = month_dir 'Files will be copied to WES batch folder on F: drive
                    If Len(Dir(year_dir, vbDirectory)) = 0 Then
                        MkDir year_dir 'If year folder doesn't already exist, create it
                    End If
                    If Len(Dir(month_dir, vbDirectory)) = 0 Then
                        MkDir month_dir 'If month folder doesn't already exist, create it
                    End If
                    'Loop through dictionary of VCFs, and move files to F: drive
                    For Each strKey In vcfDict.keys()
                        filename = vcfDict(strKey)
                        filepath = vcfBaseDir & filename
                        'Get the panelType from dictionary key. If Primarypanel or Secondarypanel, change to 'Primary' or 'Secondary'
                        PanelType = strKey
                        If PanelType = "Primarypanel" Then
                            PanelType = "Primary"
                        ElseIf PanelType = "Secondarypanel" Then
                            PanelType = "Secondary"
                        End If
                        'Copy file to F: drive, add to the NGSTestFiles table, and remove original file from S: drive
                        Set newNGSTestFile = New ADODB.Recordset
                        TodayDate = Format(Now(), "dd/mmm/yyyy Hh:Nn:ss")
                        'Create a new record in the NGSTestFile table and retrieve the auto increment ID for newly inserted record
                        sqlNewNGSFile = "INSERT INTO NGSTestFile (NGSTestID, Description, DateAdded, VCF_Filter_Import) VALUES (" & NGSTestID & ", " & "'Ingenuity VCF Output - " & PanelType & "', #" & TodayDate & "#, -1)"
                        newNGSTestFile.Open sqlNewNGSFile, CurrentProject.Connection, adOpenKeyset
                        newNGSTestFile.Open "SELECT @@identity", CurrentProject.Connection, adOpenKeyset 'Get ID of new entry
                        NGSTestFileID = newNGSTestFile.Fields(0).Value
                        'Add the auto increment ID to the end of the filename (before file extension) to ensure every file has a unique name, then copy file to F: drive.
                        dotIndx = InStrRev(filename, ".") 'Index of the start of file extension
                        filenameNoExt = Left(filename, dotIndx - 1) 'Original filename without extension
                        fileExt = Right(filename, Len(filename) - (dotIndx - 1)) 'File extension including dot
                        newFileName = filenameNoExt & "_" & NGSTestFileID & fileExt
                        FileCopy filepath, newDir & newFileName 'Copy file to the F: drive
                        SetAttr newDir & newFileName, vbReadOnly 'Make copied file read only
                        Set rsAddCat = Nothing
                        'Update the NGSTestFile record with the file path of the copied file, and record in patient log
                        un = VBA.Environ("USERNAME")
                        cn = VBA.Environ("COMPUTERNAME")
                        sqlAddFilePath = "UPDATE NGSTestFile SET NGSTestFile = '" & newDir & newFileName & "' WHERE NGSTestFileID = " & NGSTestFileID
                        sqlPatLogVar = "INSERT INTO PatientLog (InternalPatientID, LogEntry, [Date], Login, PCName) VALUES (" & patID & ", 'NGS: Variants uploaded to NGSVariants table from Ingenuity VCF Output - " & PanelType & ". (NGSTest ID: " & NGSTestID & ")', #" + TodayDate + "#,'" + un + "','" + cn + "')"
                        sqlPatLogVCF = "INSERT INTO PatientLog (InternalPatientID, LogEntry, [Date], Login, PCName) VALUES (" & patID & ", 'NGS: Ingenuity VCF Output - " & PanelType & " attached. (NGSTestFile ID: " & NGSTestFileID & ")', #" + TodayDate + "#,'" + un + "','" + cn + "')"
                        DoCmd.SetWarnings False
                        DoCmd.RunSQL sqlAddFilePath
                        DoCmd.RunSQL sqlPatLogVar
                        DoCmd.RunSQL sqlPatLogVCF
                        DoCmd.SetWarnings True
                        'Remove original file
                        Kill filepath
                    Next
                    'Find number of other variants within +/- 2bp and add to NGSVariant table so it can be displayed in subform
                    'Have to do it this way because calculating the count on the fly in subform recordsource query makes the subform read only, so classifcation, comments etc. can't be updated
                    'This is recalculated every time the results form is opened, so up to date number is always displayed to user.
                    Me.refresh 'Refresh is required to sync imported variants from Python script
                    Dim sqlPrevVars As String
                    Dim rsPrevVars As ADODB.Recordset
                    'Query below returns the variant ID and number of previous records for each variant associated with this test.
                    sqlPrevVars = "SELECT NGSVariant.NGSVariantID, (SELECT Count(*) FROM NGSVariant WHERE NGSVariant.NGSTestID <> currentVar.NGSTestID AND NGSVariant.ChrID=currentVar.ChrID AND NGSVariant.Position_hg19>=(currentVar.Position_hg19-2) And NGSVariant.Position_hg19<=(currentVar.Position_hg19+Len(currentVar.ref)+1)) AS countPrev FROM NGSVariant AS currentVar INNER JOIN NGSVariant ON currentVar.NGSVariantID = NGSVariant.NGSVariantID WHERE NGSVariant.NGSTestID = " & NGSTestID
                    Set rsPrevVars = New ADODB.Recordset
                    rsPrevVars.Open sqlPrevVars, CurrentProject.Connection, adOpenKeyset
                    'For each variant, update the relVars field of NGSVariant table
                    While Not rsPrevVars.EOF
                        sqlUpdate = "UPDATE NGSVariant SET relVars = " & rsPrevVars.Fields("countPrev") & " WHERE NGSVariantID = " & rsPrevVars.Fields("NGSVariantID")
                        DoCmd.SetWarnings False
                        DoCmd.RunSQL sqlUpdate
                        DoCmd.SetWarnings True
                        rsPrevVars.MoveNext
                    Wend
                    Set rsPrevVars = Nothing
                    Me.Requery 'Requery subform
                End If
                Set wsh = Nothing
            End If
        End If
    End If
End Sub

Private Sub FilterImport_Click()

    Dim batch As String
    Dim dnaNum As String
    Dim patID
    Dim NGSTestID As Integer
    Dim PRU As String
    Dim filename As String
    Dim filepath As String
    Dim desBaseDir As String
    Dim newNGSTestFile As ADODB.Recordset
    Dim TodayDate As String
    
    filtSrcDir = "\\gstt.local\Shared\Genetics\DNA LAB\Current\WES\Ingenuity_output\Filter_settings\"
    destDir = "\\gstt.local\Apps\Moka\Files\ngs\"
    PRU = Me.Parent.PatientID
    PRU = Replace(PRU, ":", "")
    patID = Me.Parent.InternalPatientID
    NGSTestID = Me.Parent.NGSTestID
    year_dir = destDir & Year(Now()) & "\"
    month_dir = year_dir & Month(Now()) & "\"
   
    If IsNull(Me.WESBatch) Or IsNull(Me.txt_DNA) Then
        MsgBox "Please ensure DNA number and WES batch are assigned to sample before uploading variants", vbExclamation, "Assign DNA/Batch"
    Else
        batch = Me.WESBatch
        dnaNum = Me.txt_DNA
        'Check filter settings file with correct filename exists
        filtBasePath = filtSrcDir & batch & "DNA" & dnaNum & "PRU" & PRU & ".txt"
        matchFile = Dir(filtBasePath)
        If matchFile <> "" Then
            'Display filename and confirm user wants to proceed.
            filepath = filtSrcDir & matchFile
            proceed = MsgBox("The following filter settings file will be attached to this NGS Test:" & vbNewLine & vbNewLine & filepath & vbNewLine & vbNewLine & "Click OK to proceed.", vbOKCancel + vbInformation, "Confirm Correct File")
            If proceed = vbOK Then
                newDir = month_dir 'Files will be copied to folder on F: drive
                If Len(Dir(year_dir, vbDirectory)) = 0 Then
                    MkDir year_dir 'If year folder doesn't already exist, create it
                End If
                If Len(Dir(month_dir, vbDirectory)) = 0 Then
                    MkDir month_dir 'If month folder doesn't already exist, create it
                End If
                Set newNGSTestFile = New ADODB.Recordset
                TodayDate = Format(Now(), "dd/mmm/yyyy Hh:Nn:ss")
                'Create a new record in the NGSTestFile table and retrieve the auto increment ID for newly inserted record
                sqlNewNGSFile = "INSERT INTO NGSTestFile (NGSTestID, Description, DateAdded, VCF_Filter_Import) VALUES (" & NGSTestID & ", " & "'Ingenuity Filter Settings', #" & TodayDate & "#, -1)"
                newNGSTestFile.Open sqlNewNGSFile, CurrentProject.Connection, adOpenKeyset
                newNGSTestFile.Open "SELECT @@identity", CurrentProject.Connection, adOpenKeyset 'Get ID of new entry
                NGSTestFileID = newNGSTestFile.Fields(0).Value
                'Add the auto increment ID to the end of the filename (before file extension) to ensure every file has a unique name, then copy file to F: drive.
                dotIndx = InStrRev(matchFile, ".") 'Index of the start of file extension
                filenameNoExt = Left(matchFile, dotIndx - 1) 'Original filename without extension
                fileExt = Right(matchFile, Len(matchFile) - (dotIndx - 1)) 'File extension including dot
                newFileName = filenameNoExt & "_" & NGSTestFileID & fileExt
                FileCopy filepath, newDir & newFileName 'Copy file to the F: drive
                SetAttr newDir & newFileName, vbReadOnly 'Make copied file read only
                Set rsAddCat = Nothing
                'Update the NGSTestFile record with the file path of the copied file
                sqlAddFilePath = "UPDATE NGSTestFile SET NGSTestFile = '" & newDir & newFileName & "' WHERE NGSTestFileID = " & NGSTestFileID
                DoCmd.SetWarnings False
                DoCmd.RunSQL sqlAddFilePath
                DoCmd.SetWarnings True
                Me.Requery
                D = Format(Now(), "dd/mmm/yyyy Hh:Nn:ss")
                un = VBA.Environ("USERNAME")
                cn = VBA.Environ("COMPUTERNAME")
                sqlPatLogFil = "INSERT INTO PatientLog (InternalPatientID, LogEntry, [Date], Login, PCName) VALUES (" & patID & ", 'NGS: Ingenuity Filter Settings file attached. (NGSTestFile ID: " & NGSTestFileID & ")', #" + D + "#,'" + un + "','" + cn + "')"
                DoCmd.SetWarnings False
                DoCmd.RunSQL sqlPatLogFil
                DoCmd.SetWarnings True
                'If all processing above has completed without errors, remove the original file.
                Kill filepath
            End If
        Else
            MsgBox "No filter settings file found that matches test details. Filter settings file must be:" & vbNewLine & vbNewLine & _
            "1. Saved with filename format: " & batch & "DNA" & dnaNum & "PRU" & PRU & ".txt" & vbNewLine & _
            "2. Saved in the following directory: " & filtSrcDir, vbExclamation, "No Filter Settings Found"
        End If
     End If
End Sub


Private Sub comb_WESResultBuild_AfterUpdate()
    Dim Q As ADODB.Recordset
    Dim S As String
    Dim dt As String
    Dim usr As String
    Dim cn As String
    dt = Format(Now, "dd/mmm/yyyy Hh:Nn:ss")
    usr = VBA.Environ("USERNAME")
    cn = VBA.Environ("COMPUTERNAME")
    Set Q = New ADODB.Recordset
    If IsNull([WESResultBuild]) Then
        S = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Genome build deleted for test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
    Else
        S = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Genome build changed to Item ID: " + CStr(Me![WESResultBuild]) + " for test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
    End If
    Q.Open S, CurrentProject.Connection
    Set Q = Nothing
End Sub


Private Sub btn_Phenotips_Click()
    Call firefoxurl("http://10.188.197.57:8080/phenotips/bin/")
    'TO DO --> look up API to search for PRU
End Sub


Private Sub StatusID_BeforeUpdate(Cancel As Integer)
' prevent user setting status to NULL
If IsNull(Me.StatusID) Then
    msga = MsgBox("No test status selected." & vbNewLine & "To continue please select a test status.", vbOKOnly Or vbExclamation, "ATTENTION")
    Cancel = True
ElseIf Me.StatusID = 4 Or Me.StatusID = 1202218816 Then
    msgb = MsgBox("Sorry you cannot presently update this tests status to " & vbNewLine + Me![StatusID].Column(1) + vbNewLine & "Please select another status, or update the status using the NGS Dashboard", vbOKOnly Or vbInformation, "Status update")
    Cancel = True
ElseIf (Me.StatusID = 1202218814 Or Me.StatusID = 1202218815) And IsNull(Me.Checker3) Then
    msgb = MsgBox("Sorry you cannot presently update this tests status to " & vbNewLine + Me![StatusID].Column(1) + vbNewLine & "Please select another status, or update the status using the NGS Dashboard", vbOKOnly Or vbInformation, "Status update")
    Cancel = True
End If
End Sub


Private Sub StatusID_AfterUpdate()

    Dim Q As ADODB.Recordset
    Dim U As ADODB.Recordset
    Dim rs As ADODB.Recordset
    Dim l As String
    Dim v As String
    Dim b As String
    Dim dt As String
    Dim usr As String
    Dim cn As String
    
    Set Q = New ADODB.Recordset
    Set U = New ADODB.Recordset
    
    dt = Format(Now, "dd/mmm/yyyy Hh:Nn:ss")
    usr = VBA.Environ("USERNAME")
    cn = VBA.Environ("COMPUTERNAME")
    
    ' If status is changed to 'Batching' check if WES test has been assigned to a WES Batch. If user confrms continuation remove sample from named WES batch
    If Me.StatusID = 1202218803 And Not IsNull(Me.WESBatch) Then
        If MsgBox("This test has already been assigned to WES Batch: " & Me![WESBatch] & vbNewLine & "Continuing will remove this test from this WES Batch." & vbNewLine & vbNewLine & "Do you wish to proceed?", vbYesNo Or vbExclamation, "TEST ALREADY ASSIGNED TO WES BATCH") = vbNo Then
            Me.StatusID = 1202218807 ' set status to assessment by default
            l = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Status updated to " + Me![StatusID].Column(1) + " as default. For test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
            v = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ", 1, " + CStr(Me![NGSTestID]) + ",'NGS WES test status updated to: " + Me![StatusID].Column(1) + "' ,#" + dt + "#,'" + usr + "','" + cn + "')"
            Q.Open l, CurrentProject.Connection
            U.Open v, CurrentProject.Connection
            Cancel = True
        Else
            If MsgBox("Are you sure you wish to remove this test from WES Batch: " & Me![WESBatch], vbYesNo Or vbExclamation, "ARE YOU SURE?") = vbNo Then
                Me.StatusID = 1202218807 ' set status to assessment by default
                l = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Status updated to " + Me![StatusID].Column(1) + " as default. For test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
                v = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ", 1, " + CStr(Me![NGSTestID]) + ",'NGS WES test status updated to: " + Me![StatusID].Column(1) + "' ,#" + dt + "#,'" + usr + "','" + cn + "')"
                Q.Open l, CurrentProject.Connection
                U.Open v, CurrentProject.Connection
                Cancel = True
            Else
                
                l = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Status updated to " + Me![StatusID].Column(1) + " for test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
                v = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ", 1, " + CStr(Me![NGSTestID]) + ",'NGS WES test status updated to: " + Me![StatusID].Column(1) + "' ,#" + dt + "#,'" + usr + "','" + cn + "')"
                'record sample being removed from WES batch
                Set rs = New ADODB.Recordset
                b = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" & Me!InternalPatientID & ", ' Test removed from WES batch " & Me![WESBatch] & " form NGS test " & Me!NGSTestID & ". ',#" + dt + "#,'" + usr + "','" + cmp + "')"
                rs.Open b, CurrentProject.Connection
                Me.testWESBatch = Null
                Set rs = Nothing
            End If
        End If
    Else
    l = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Status updated to " + Me![StatusID].Column(1) + " for test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
    v = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ", 1, " + CStr(Me![NGSTestID]) + ",'NGS WES test status updated to: " + Me![StatusID].Column(1) + "' ,#" + dt + "#,'" + usr + "','" + cn + "')"
    End If
    
    Q.Open l, CurrentProject.Connection
    U.Open v, CurrentProject.Connection
    Me.Parent.Form.Requery
    Set Q = Nothing
    Set U = Nothing

End Sub


Private Sub StatusID_GotFocus()
' locks status form if the test has been assigned to either complete or Test failed
If (Me.StatusID = 4 Or Me.StatusID = 1202218816) And Me.Parent.SafetyCheck.Value = False Then
    msg1 = MsgBox("Sorry, the test status may no longer be updated. ", vbOKOnly Or vbInformation, "Status update")
    Me.StatusID.Locked = True
'Else
'    Me.StatusID.Locked = False
End If
End Sub

Private Sub Checker1_AfterUpdate()
    Dim rs As ADODB.Recordset
    Dim rs2 As ADODB.Recordset
    Dim plSQL As String
    Dim pl2SQL As String
    Dim dt As String
    Dim usr As String
    Dim cmp As String
    
    Set rs = New ADODB.Recordset
    dt = Format(Now, "dd/mmm/yyyy Hh:Nn:ss")
    usr = VBA.Environ("USERNAME")
    cmp = VBA.Environ("COMPUTERNAME")
 
 ' record log if checker1 entry is removed
 
    If IsNull([Checker1]) Then
        plSQL = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Initials for variant interpretation analysis removed for NGS test " + CStr(Me![NGSTestID]) + " requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cmp + "')"
        Me![txt_Check1Date] = Null
        Me![txt_Check1Date].Requery
        rs.Open plSQL, CurrentProject.Connection
        
        If Not IsNull([Checker2]) Then
            Set rs2 = New ADODB.Recordset
            pl2SQL = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Initials (ID:" + CStr(Me![Checker2]) + ") for checking result page (variant interpretation) removed for NGS test " + CStr(Me![NGSTestID]) + " requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cmp + "')"
            Me![Checker2] = Null
            Me![txt_Check2Date] = Null
            Me![Checker2].Requery
            Me![txt_Check2Date].Requery
            rs2.Open pl2SQL, CurrentProject.Connection
        End If
    Else
         plSQL = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Variant interpretation analysis assigned to " + Me![Checker1].Column(1) + " for test " + CStr(Me![NGSTestID]) + " requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cmp + "')"
        rs.Open plSQL, CurrentProject.Connection
    End If

    Set rs = Nothing
    'Refresh fromatting on the page
    Me.Parent.Requery
End Sub


Private Sub txt_Check1Date_DblClick(Cancel As Integer)
    Dim rs As ADODB.Recordset
    Dim plSQL As String
    Dim dt As String
    Dim usr As String
    Dim cmp As String
    
    Set rs = New ADODB.Recordset
    dt = Format(Now, "dd/mmm/yyyy Hh:Nn:ss")
    usr = VBA.Environ("USERNAME")
    cmp = VBA.Environ("COMPUTERNAME")
    
'prevent check 1 date being updated after a check
If Not IsNull(Checker2) Or Not IsNull(Checker3) Then
    MsgBox "Report already has been marked as Check and/or Reported. Unable to update this feild", , "Update not permitted"
    Exit Sub
    
ElseIf Not IsNull([Checker1]) Then
          plSQL = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Variant interpretation analysis entered by " + Me![Checker1].Column(1) + " for test " + CStr(Me![NGSTestID]) + " requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cmp + "')"
        Me![txt_Check1Date] = Now()
        Me.[txt_Check1Date].Requery
        rs.Open plSQL, CurrentProject.Connection

Else
    MsgBox "Enter initials into 'Assigned to' field to proceed", , "No Record For Checker1 Entered"
End If

    Set rs = Nothing
    'Refresh fromatting on the page
    Me.Parent.Requery

End Sub

Private Sub txt_Check1Date_AfterUpdate()
    Dim rs As ADODB.Recordset
    Dim rs2 As ADODB.Recordset
    Dim plSQL As String
    Dim pl2SQL As String
    Dim dt As String
    Dim usr As String
    Dim cmp As String
    
    Set rs = New ADODB.Recordset
    dt = Format(Now, "dd/mmm/yyyy Hh:Nn:ss")
    usr = VBA.Environ("USERNAME")
    cmp = VBA.Environ("COMPUTERNAME")
    
    If IsNull([txt_Check1Date]) Then
        plSQL = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Date of completed variant interpretation analysis removed for NGS test " + CStr(Me![NGSTestID]) + " requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cmp + "')"
        Me![txt_Check1Date] = Null
        Me![txt_Check1Date].Requery
        rs.Open plSQL, CurrentProject.Connection
        
        If Not IsNull([Checker2]) Then
            Set rs2 = New ADODB.Recordset
            pl2SQL = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Initials (ID:" + CStr(Me![Checker2]) + ") for checking result page (variant interpretation) removed for NGS test " + CStr(Me![NGSTestID]) + " requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cmp + "')"
            Me![Checker2] = Null
            Me![txt_Check2Date] = Null
            Me![Checker2].Requery
            Me![txt_Check2Date].Requery
            rs2.Open pl2SQL, CurrentProject.Connection
        End If
    End If
    
End Sub


Private Sub Checker2_AfterUpdate()
    Dim rs As ADODB.Recordset
    Dim plSQL As String
    Dim dt As String
    Dim usr As String
    Dim cmp As String

    Set rs = New ADODB.Recordset
    dt = Format(Now, "dd/mmm/yyyy Hh:Nn:ss")
    usr = VBA.Environ("USERNAME")
    cmp = VBA.Environ("COMPUTERNAME")


'checks checker 1 ID and date has been entered before permitting approval (checker 2). Updates patient log accordingly
    If IsNull(Me![Checker1]) Or IsNull(txt_Check1Date) Then
        MsgBox "Unable to confirm check of variant interpretation until 'Assigned to' initials and associated date are entered", , "No Record For Checker1 Entered"
                   Me![Checker2] = Null
           Me![Checker2].Requery
           Me![txt_Check2Date] = Null
           Me![txt_Check2Date].Requery
    
'checks checker 1 ID and checker 2 id are not the same
    ElseIf Me.[Checker2] = Me.[Checker1] Then
           MsgBox "Checked by ID cannot be the same as 'Assigned to'  ", vbOKOnly Or vbExclamation, "Attention"
           Me![Checker2] = Null
           Me![Checker2].Requery
           Me![txt_Check2Date] = Null
           Me![txt_Check2Date].Requery
    
    Else
'logs if checker 2 ID is deleated
        If IsNull([Checker2]) Then
            plSQL = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Initials for checking result page removed for NGS test " + CStr(Me![NGSTestID]) + " requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cmp + "')"
            Me![txt_Check2Date] = Null
            Me![txt_Check2Date].Requery
            
        Else 'logs if checker 2 ID entry
            plSQL = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Result page (variant interpretation) checked by  " + Me![Checker2].Column(1) + " for test " + CStr(Me![NGSTestID]) + " requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cmp + "')"
            Me![txt_Check2Date] = Now()
            Me.[txt_Check2Date].Requery
            'Me.Parent.[SafetyCheck].Value = True
            
        End If
        rs.Open plSQL, CurrentProject.Connection
    End If
    Set rs = Nothing
End Sub


Private Sub Checker3_AfterUpdate()
' Log status change
    Dim Q As ADODB.Recordset
    Dim U As ADODB.Recordset
    Dim rs As ADODB.Recordset
    Dim l As String
    Dim ck As String
    Dim v As String
    Dim dt As String
    Dim usr As String
    Dim cn As String

    Set Q = New ADODB.Recordset
    Set U = New ADODB.Recordset
    
    dt = Format(Now, "dd/mmm/yyyy Hh:Nn:ss")
    usr = VBA.Environ("USERNAME")
    cn = VBA.Environ("COMPUTERNAME")
    
    ' Check that a final result has been entered into for the test
    If IsNull(Me.Parent.txt_result) Then
        msg_a = MsgBox("No Result has been entered for this WES test", vbOKOnly Or vbExclamation, "ATTENTION")
        Me.Checker3 = Null
        Me!txt_Check3Date = Null
        
    ' Check that the checker1 feild has been completed
    ElseIf IsNull(Checker1) Or IsNull(txt_Check1Date) Then
        msg_b = MsgBox("Interpretation of test has not been marked as checked" & vbNewLine & "Please enter 'Assigned to' intitials and date before proceeding ", vbOKOnly Or vbExclamation, "ATTENTION")
        Me.Checker3 = Null
        Me!txt_Check3Date = Null
        Me!Checker1.SetFocus
        
    ' check that if the test status = report negative or report positive, then a second check has been approved.
    ElseIf Me![StatusID] = 1202218811 Or Me![StatusID] = 1202218812 Then
        If Not IsNull(Checker2) Then
            Me!txt_Check3Date = dt
        ' Update Patient table with the result
            Call UpdatePatientRes
        'Update test status to report pending approval
            Me![StatusID] = 1202218814
        'log test status change
            l = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Status updated to Pending Report Authorsation for test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
            v = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ", 1, " + CStr(Me![NGSTestID]) + ",'NGS WES test status updated to: Pending Report Authorsation' ,#" + dt + "#,'" + usr + "','" + cn + "')"
            ck = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Result reported by " & Me.Checker3 & " for NGS test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
            
            Set rs = New ADODB.Recordset
            rs.Open ck, CurrentProject.Connection
            Q.Open l, CurrentProject.Connection
            U.Open v, CurrentProject.Connection
             
            msg_c = MsgBox(" Test status updated." & vbNewLine & "Report pending approval", vbOKOnly Or vbInformation, "Report pending approval")
           
            Me.StatusID.Locked = True
            Me.Parent.Form.Requery
            Set Q = Nothing
            Set U = Nothing
            Set rs = Nothing

        Else
            msg_c = MsgBox("Interpretation of test has not had second check" & vbNewLine & "Please enter Checker 2 intitials before proceeding ", vbOKOnly Or vbExclamation, "ATTENTION")
            Me.Checker3 = Null
            Me!txt_Check3Date = Null
            Me!Checker2.SetFocus
        End If
                   
   ' update log and status for tests to be reported as failed
    ElseIf Me![StatusID] = 1202218813 Then
        Me!txt_Check3Date = dt
    ' Update Patient table with the result
        Call UpdatePatientRes
    'Update test status to report pending approval
        Me![StatusID] = 1202218815
    'log test status change
        l = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Status updated to " + Me![StatusID].Column(1) + " for test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
        v = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ", 1, " + CStr(Me![NGSTestID]) + ",'NGS WES test status updated to: " + Me![StatusID].Column(1) + "' ,#" + dt + "#,'" + usr + "','" + cn + "')"
        ck = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Result reported by " & Me.Checker3 & " for NGS test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
        msg_d = MsgBox(" Test status updated." & vbNewLine & "Report pending approval", vbOKOnly Or vbInformation, "Report pending approval")
        Set rs = New ADODB.Recordset
        rs.Open ck, CurrentProject.Connection
        Q.Open l, CurrentProject.Connection
        U.Open v, CurrentProject.Connection
        Me.StatusID.Locked = True
        Me.Parent.Form.Requery
        Set Q = Nothing
        Set U = Nothing
        Set rs = Nothing

    'If reporter removes signiture, removal is logged
    ElseIf IsNull(Me!Checker3) Then
        Me.txt_Check3Date = Null
        ck = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Result reported by ID, removed for NGS test requested. NGSTest status set to Assessment by default  " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
        v = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ", 1, " + CStr(Me![NGSTestID]) + ",'Reporter ID has been removed. Test status set to: Assessment (as default)" ' ,#" + dt + "#,'" + usr + "','" + cn + "')"
        Me.StatusID = 1202218807
        msg_d = MsgBox("Reporter ID has been removed." & vbNewLine & "Test status will be set to Assessment as default ", vbOKOnly, "Reporter ID")
        Set rs = New ADODB.Recordset
        rs.Open ck, CurrentProject.Connection
        U.Open v, CurrentProject.Connection
        Set rs = Nothing
        Set U = Nothing
    Else
        msg_c = MsgBox("This test's current test status indicates  that it is not yet ready to be repoted", vbOKOnly Or vbInformation, "ATTENTION")
        Me.Checker3 = Null
        Me.txt_Check3Date = Null
    End If

End Sub


Private Sub Checker4_AfterUpdate()
'Log aprover ID and status change
    Dim Q As ADODB.Recordset
    Dim U As ADODB.Recordset
    Dim rs As ADODB.Recordset
    Dim P As ADODB.Recordset
    Dim l As String
    Dim ck As String
    Dim v As String
    Dim p8 As String
    Dim dt As String
    Dim usr As String
    Dim cn As String
    Dim strUpd8Patient As String
    Set U = New ADODB.Recordset
    Set rs = New ADODB.Recordset
    
    dt = Format(Now, "dd/mmm/yyyy Hh:Nn:ss")
    usr = VBA.Environ("USERNAME")
    cn = VBA.Environ("COMPUTERNAME")
      
    
    If IsNull(Me!Checker4) Then  ' If approver removes signiture, removal is logged chage patient status back to NGS
        Me.txt_Check4Date = Null
        
        ck = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Report Approval ID, removed for NGS test requested. NGSTest status set to default (Pending Report Authorsation)',#" + dt + "#,'" + usr + "','" + cn + "')"
        v = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ", 1, " + CStr(Me![NGSTestID]) + ",'Reporter ID has been removed. Test status set to: Pending Report Authorsation (as default)' ,#" + dt + "#,'" + usr + "','" + cn + "')"
        rs.Open ck, CurrentProject.Connection
        U.Open v, CurrentProject.Connection
        
        'check is patient status had been updated is so, revert to NGS upon intial deleation
        If Me.Parent.[Patient Status] = "Complete" Or Me.Parent.[Patient Status] = "Test Failed" Then
            Set P = New ADODB.Recordset
            strUpd8Patient = "UPDATE Patients SET s_StatusOverall = 1202218798 WHERE Patients.InternalPatientID = " & Me![InternalPatientID]
            p8 = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'Patient: Status changed to: NGS " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
            
            'run SQL
            DoCmd.SetWarnings False
            DoCmd.RunSQL strUpd8Patient
            DoCmd.SetWarnings True
            P.Open p8, CurrentProject.Connection
            Set P = Nothing
            Me.Parent.Requery
        End If
        
        Me.StatusID.Locked = False
        Me.StatusID = 1202218814 ' change status to bypass lock down error
        
        msg_d = MsgBox("Report approver ID has been removed." & vbNewLine & "Please update test Status", vbOKOnly Or vbInformation, "Approver ID")
        Me.StatusID.SetFocus
        
        Set rs = Nothing
        Set U = Nothing
        Exit Sub
    
    ' Update patient and test status to complete providing that the test has been reported and test status is currently 'pending approval'
    ElseIf Not IsNull(Checker3) And Me.StatusID = 1202218814 Then
        ' Open extra recordsets required
        Set Q = New ADODB.Recordset
        Set P = New ADODB.Recordset
        
        ' Add date of approval and update test status
        Me!txt_Check4Date = dt
        Me![StatusID] = 4
        
        ' Log approval, update and log test status to 'complete'
        ck = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Report approved by " & Me.Checker4 & " for NGS test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
        l = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Status updated to Complete for test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
        v = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ", 1, " + CStr(Me![NGSTestID]) + ",'Test status set to: Complete' ,#" + dt + "#,'" + usr + "','" + cn + "')"
        
        ' Update patient overal status to complete and log
        strUpd8Patient = "UPDATE Patients SET s_StatusOverall = 4 WHERE Patients.InternalPatientID = " & Me![InternalPatientID]
        p8 = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'Patient: Status changed to: Complete " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
        
        'run SQL
        DoCmd.SetWarnings False
        DoCmd.RunSQL strUpd8Patient
        DoCmd.SetWarnings True
        
        rs.Open ck, CurrentProject.Connection
        Q.Open l, CurrentProject.Connection
        U.Open v, CurrentProject.Connection
        P.Open p8, CurrentProject.Connection
        
        Set rs = Nothing
        Set Q = Nothing
        Set U = Nothing
        Set P = Nothing
        Me.Parent.Requery
    
   ' Update patient and test status to 'Test Failed' providing that the test has been reported and test status is currently 'pending approval (failed report)'
    ElseIf Not IsNull(Checker3) And Me.StatusID = 1202218815 Then
        ' Open extra recordsets required
        Set Q = New ADODB.Recordset
        Set P = New ADODB.Recordset
        
        ' Add date of approval and update test status
        Me!txt_Check4Date = dt
        Me![StatusID] = 1202218816
        
        ' Log approval, update and log test status to 'Test Failed'
        ck = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Report approved by " & Me.Checker4 & " for NGS test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
        l = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Status updated to Test Failed for test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
        v = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ", 1, " + CStr(Me![NGSTestID]) + ",'Test status set to: Test Failed' ,#" + dt + "#,'" + usr + "','" + cn + "')"

        ' Update patient overal status to complete and log
        strUpd8Patient = "UPDATE Patients SET s_StatusOverall = 1202218816 WHERE Patients.InternalPatientID = " & Me![InternalPatientID]
        p8 = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'Patient: Status changed to: Complete " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
        
        'run SQL
        DoCmd.SetWarnings False
        DoCmd.RunSQL strUpd8Patient
        DoCmd.SetWarnings True
    
        rs.Open ck, CurrentProject.Connection
        Q.Open l, CurrentProject.Connection
        U.Open v, CurrentProject.Connection
        P.Open p8, CurrentProject.Connection
        
        Set rs = Nothing
        Set Q = Nothing
        Set U = Nothing
        Set P = Nothing
        Me.Parent.Requery
        
    ' if approver ID is updated after being entered
    ElseIf Me.StatusID = 4 Or Me.StatusID = 1202218816 Then
        ck = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Report approved by ID has been updated to " & Me.Checker4 & " for NGS test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
        msg_1 = MsgBox("Authoriser ID has been updated to " + Me.Checker4.Column(2), vbOKOnly Or vbInformation, "Authoriser updated")
        rs.Open ck, CurrentProject.Connection
        Set rs = Nothing
        
    Else
        msg_w = MsgBox("Report is not yet ready for approval.", vbOKOnly Or vbExclamation, "Error")
        Me.Checker4 = Null
    End If

End Sub
Function UpdatePatientRes()
' Auto update the result recorded in Patients table
    Dim A As ADODB.Recordset
    Dim b As ADODB.Recordset
    Dim C As ADODB.Recordset
    Dim dt As String
    Dim usr As String
    Dim cn As String
    Dim r As String
    Dim S As String
    Dim x As String
    Dim Y As String
    Dim t As String
    Dim PL As String
    Dim POR As String

    Set A = New ADODB.Recordset
    Set b = New ADODB.Recordset
    Set C = New ADODB.Recordset
    
    dt = Format(Now, "dd/mmm/yyyy Hh:Nn:ss")
    usr = VBA.Environ("USERNAME")
    cn = VBA.Environ("COMPUTERNAME")
    
' Check if there is a record already in the Patients results feild. If true, append new result to the end.
    x = Me.InternalPatientID
    Y = Me.Parent.txt_result
    r = "SELECT OverallResultComments FROM Patients WHERE InternalPatientID = " + x + ""
    A.Open r, CurrentProject.Connection, adOpenKeyset, adLockOptimistic, adCmdText
    
    If Not IsNull(A!OverallResultComments) Then
        t = A!OverallResultComments
        S = "" + t + "," + Y + ""
    Else: S = "" + Y + ""
    End If
    
' update record
    A!OverallResultComments = S
    A.Update

' update Patient log
    PL = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'Patient: Result changed to [" + S + "]',#" + dt + "#,'" + usr + "','" + cn + "')"
    POR = "INSERT INTO PrevOverallResult(InternalPatientID, OverallResult, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",' WES result: " + Me.Parent.[txt_result] + "', #" + dt + "#,'" + usr + "','" + cn + "');"
    b.Open PL, CurrentProject.Connection
    C.Open POR, CurrentProject.Connection

Set A = Nothing
Set b = Nothing
Set C = Nothing
                
End Function


Private Sub txt_Resultcmt_AfterUpdate()
' NGS test results comments/ observations record
    Dim Q As ADODB.Recordset
    Dim r As ADODB.Recordset
    Dim S As String
    Dim t As String
    Dim dt As String
    Dim usr As String
    Dim cn As String
    
    dt = Format(Now, "dd/mmm/yyyy Hh:Nn:ss")
    usr = VBA.Environ("USERNAME")
    cn = VBA.Environ("COMPUTERNAME")
    Set Q = New ADODB.Recordset
    
    'Debug.Print Me.txt_Resultcmt
    
    ' Insert record and comment into PatientLog memo which can then be recalled later with input info.
    If IsNull(Me.txt_Resultcmt) Then
        'Debug.Print "If null test"
        S = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ", 3," + CStr(Me![NGSTestID]) + ",'NGS WES test: Result comment deleted for WES test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
        'Debug.Print S
    Else
        Dim rc As String
        'Debug.Print " test"
        rc = Replace(Me![txt_Resultcmt], "'", "''")
        S = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ", 3, " + CStr(Me![NGSTestID]) + ",'NGS WES test: Result comment updated for WES test requested " + CStr(Me![DateRequested]) + " - " + rc + "',#" + dt + "#,'" + usr + "','" + cn + "')"
        'Debug.Print S
    End If
    Q.Open S, CurrentProject.Connection
    Set Q = Nothing

    ' Record input in the patient log
    Set r = New ADODB.Recordset
    If IsNull([txt_Resultcmt]) Then
        t = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Result comment deleted for WES test requested " + CStr(Me![DateRequested]) + "',#" + dt + "#,'" + usr + "','" + cn + "')"
    Else
        t = "INSERT INTO PatientLog(InternalPatientID, LogEntry, [Date], Login, PCName) VALUES(" + CStr(Me![InternalPatientID]) + ",'NGS WES test: Result comment updated for WES test requested " + CStr(Me![DateRequested]) + " - see memo log',#" + dt + "#,'" + usr + "','" + cn + "')"
    End If
    r.Open t, CurrentProject.Connection
    Set r = Nothing

End Sub


Private Sub txt_Resultcmt_DblClick(Cancel As Integer)
' View past comment history for test
Me.Dirty = False
Dim stDocName As String
    stDocName = "s0901_NGSLogMemo"
    stLinkCriteria = "[Type] = 3 AND [LinkID] = " & Me![NGSTestID]
    DoCmd.OpenForm stDocName, acFormDS, , stLinkCriteria
End Sub



