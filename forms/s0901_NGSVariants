Option Compare Database

Private Sub Classification_AfterUpdate()
    Dim d As String
    Dim un As String
    Dim cn As String
    Dim Classification As String
    d = Format(Now(), "dd/mmm/yyyy Hh:Nn:ss")
    un = VBA.Environ("USERNAME")
    cn = VBA.Environ("COMPUTERNAME")
    patID = Me.Parent.InternalPatientID
    Classification = Me.Classification.Column(1)
    sqlMemo = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" + CStr(patID) + ", 2, " + CStr(Me.NGSVariantID) + ",'Variant classification updated to: " + Classification + "',#" + d + "#,'" + un + "','" + cn + "')"
    sqlPatLogVar = "INSERT INTO PatientLog (InternalPatientID, LogEntry, [Date], Login, PCName) VALUES (" & patID & ", 'NGS: Variant classification for NGSVariantID " & Me.NGSVariantID & " updated to: " & Classification & "', #" + d + "#,'" + un + "','" + cn + "')"
    DoCmd.SetWarnings False
    DoCmd.RunSQL sqlMemo
    DoCmd.RunSQL sqlPatLogVar
    DoCmd.SetWarnings True
End Sub

Private Sub commentShort_DblClick(Cancel As Integer)
    Dim stDocName As String
    Dim rsAddComment As ADODB.Recordset
    Dim sqlAddComment As String
    Dim requiresRequery As Boolean
    
    'Initialise requiresRequery to False. If a new comment/acmg record is created, a requery of the form is needed to pull in the new records
    'However this has to be done at the end otherwise the form resets to the first record and the wrong variant is opened in the ACMG form
    requiresRequery = False
    
    'If there isn't a comment, create an empty one.
    If IsNull(Me.NGSVariantCommentID) Then
        Set rsAddComment = New ADODB.Recordset ' create empty recordset to add new comment
        sqlAddComment = "INSERT INTO NGSVariantComment(Comment) VALUES ('')" ' SQL query to insert an empty comment into NGSVariantComment table
        rsAddComment.Open sqlAddComment, CurrentProject.Connection, adOpenKeyset ' execute the query to add empty comment
        ' capture the NGSVariantCommentID for the newly created empty comment. Store in commentID variable.
        rsAddComment.Open "SELECT @@identity", CurrentProject.Connection, adOpenKeyset
        commentID = rsAddComment.Fields(0).Value
        Set rsAddComment = Nothing ' Close the recordset to close database connection
        Me.NGSVariantCommentID = commentID ' set the commentID for this record to the key for the newly created empty comment
        requiresRequery = True 'Set requiresRequery to True so requery is performed at end
    End If
    
    'If there isn't an existing ACMG record for the variant, create an empty one
    If IsNull(Me.NGSVariantACMGID) Then
        Set rsAddACMG = New ADODB.Recordset ' create new recordset
        ' sql query to insert NGSVariantID into NGSVariantACMG table
        sqlAddACMG = "INSERT INTO NGSVariantACMG(NGSVariantID) VALUES (" & Me.NGSVariantID & ")"
        rsAddACMG.Open sqlAddACMG, CurrentProject.Connection, adOpenKeyset 'execute the query
        Set rsAddACMG = Nothing ' Close the recordset to close database connection
        requiresRequery = True 'Set requiresRequery to True so requery is performed at end
    End If
    'Needs a refresh for newly inserted comment/ACMG records to be found
    Me.Refresh
    stDocName = "s0901_NGSVariantACMGPopup" ' define name of the form to open
    stLinkCriteria = "[NGSVariantID] = " & Me.NGSVariantID ' Link the two forms on NGSVariantID
    'If form is locked following test completion, open the ACMG window in READ ONLY mode
    If Me.AllowEdits = False Then
        DoCmd.OpenForm stDocName, , , stLinkCriteria, acFormReadOnly
    'If form is not locked, open the comment window in EDIT mode
    Else
        DoCmd.OpenForm stDocName, , , stLinkCriteria, acFormEdit
    End If
    'Requery only if required (to prevent unnecessarily reseting to first record
    If requiresRequery Then
        Me.Requery
    End If
End Sub

Private Sub countPrev_DblClick(Cancel As Integer)
    Me.Dirty = False 'Force any changes to be saved
    stLinkCriteria = "[NGSVariantID] = " & Me.NGSVariantID
    If Me.AllowEdits = False Then
        'If form is locked following test completion, open prev vars popup in READ ONLY mode so no updates can be made
        DoCmd.OpenForm "s0901_NGSPrevVarsPopup", , , stLinkCriteria, acFormReadOnly
    Else
        'If form is not locked, open prev vars popup in EDIT mode so no updates can be made
        DoCmd.OpenForm "s0901_NGSPrevVarsPopup", , , stLinkCriteria, acFormEdit
    End If
End Sub

Private Sub DateAdded_DblClick(Cancel As Integer)
    'View log history for Variant
    Me.Dirty = False 'Forces any changes to be saved
    Dim stDocName As String
    stDocName = "s0901_NGSLogMemo"
    stLinkCriteria = "[Type] = 2 AND [LinkID] = " & Me.NGSVariantID
    DoCmd.OpenForm stDocName, acFormDS, , stLinkCriteria
End Sub

Private Sub Inheritance_AfterUpdate()
    Dim d As String
    Dim un As String
    Dim cn As String
    Dim Inheritance As String
    d = Format(Now(), "dd/mmm/yyyy Hh:Nn:ss")
    un = VBA.Environ("USERNAME")
    cn = VBA.Environ("COMPUTERNAME")
    patID = Me.Parent.InternalPatientID
    Inheritance = Me.Inheritance.Column(1)
    sqlMemo = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" + CStr(patID) + ", 2, " + CStr(Me.NGSVariantID) + ",'Variant inheritance updated to: " + Inheritance + "',#" + d + "#,'" + un + "','" + cn + "')"
    sqlPatLogVar = "INSERT INTO PatientLog (InternalPatientID, LogEntry, [Date], Login, PCName) VALUES (" & patID & ", 'NGS: Variant inheritance for NGSVariantID " & Me.NGSVariantID & " updated to: " & Inheritance & "', #" + d + "#,'" + un + "','" + cn + "')"
    DoCmd.SetWarnings False
    DoCmd.RunSQL sqlMemo
    DoCmd.RunSQL sqlPatLogVar
    DoCmd.SetWarnings True
End Sub

Private Sub SangerConf_Click()
    Dim d As String
    Dim un As String
    Dim cn As String
    Dim RC As String
    Dim sqlMemo As String
    Dim sqlPatLog As String
    d = Format(Now(), "dd/mmm/yyyy Hh:Nn:ss")
    un = VBA.Environ("USERNAME")
    cn = VBA.Environ("COMPUTERNAME")
    patID = Me.Parent.InternalPatientID

    'Add record to log when user ticks or unticks Sanger conf box
    If Me![SangerConf] Then
        sqlMemo = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" + CStr(patID) + ", 2, " + CStr(Me.NGSVariantID) + ",'Sanger confirmation box TICKED.',#" + d + "#,'" + un + "','" + cn + "')"
        sqlPatLog = "INSERT INTO PatientLog (InternalPatientID, LogEntry, [Date], Login, PCName) VALUES (" & patID & ", 'NGS: Sanger confirmation box for NGSVariantID " & Me.NGSVariantID & " TICKED.', #" + d + "#,'" + un + "','" + cn + "')"
    Else
        sqlMemo = "INSERT INTO NGSLogMemo(InternalPatientID, Type, LinkID, LogMemoEntry, [Date], Login, PCName) VALUES(" + CStr(patID) + ", 2, " + CStr(Me.NGSVariantID) + ",'Sanger confirmation box UNTICKED.',#" + d + "#,'" + un + "','" + cn + "')"
        sqlPatLog = "INSERT INTO PatientLog (InternalPatientID, LogEntry, [Date], Login, PCName) VALUES (" & patID & ", 'NGS: Sanger confirmation box for NGSVariantID " & Me.NGSVariantID & " UNTICKED.', #" + d + "#,'" + un + "','" + cn + "')"
    End If
    DoCmd.SetWarnings False
    DoCmd.RunSQL sqlMemo
    DoCmd.RunSQL sqlPatLog
    DoCmd.SetWarnings True
End Sub
